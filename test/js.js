// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)


class MusicCollection {
  constructor(albums) {
    this.albums = albums;
  }

  [Symbol.iterator]() {
    let index = 0;
    const albums = this.albums;

    return {
      next() {
        if (index < albums.length) {
          return {
            value: albums[index++],
            done: false
          };
        } else {
          return {
            done: true
          };
        }
      }
    };
  }
}

const albums = [
  { title: 'Album 1', artist: 'Artist 1', year: '2000' },
  { title: 'Album 2', artist: 'Artist 2', year: '2005' },
  { title: 'Album 3', artist: 'Artist 3', year: '2010' }
];

const musicCollection = new MusicCollection(albums);

for (const album of musicCollection) {
  console.log(`${album.title} - ${album.artist} (${album.year})`);
}



// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

const cooks = new Map([
  ["Пицца 'Маргарита'", "Виктор"],
  ["Пицца 'Пепперони'", "Виктор"],
  ["Суши 'Филадельфия'", "Ольга"],
  ["Суши 'Калифорния'", "Ольга"],
  ["Тирамису", "Дмитрий"],
  ["Чизкейк", "Дмитрий"]
]);

const alexey = { name: "Алексей" };
const maria = { name: "Мария" };
const irina = { name: "Ирина" };

const orders = new Map([
  [alexey, ["Пицца 'Пепперони'", "Тирамису"]],
  [maria, ["Суши 'Калифорния'", "Пицца 'Маргарита'"]],
  [irina, ["Чизкейк"]]
]);

function displayOrdersAndChefs() {
  orders.forEach((dishes, client) => {
    console.log(`Заказы клиента ${client.name}:`);
    dishes.forEach(dish => {
      const chef = cooks.get(dish);
      console.log(`  - ${dish} (Повар: ${chef})`);
    });
  });
}

displayOrdersAndChefs();
